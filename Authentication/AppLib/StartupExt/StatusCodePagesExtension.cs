namespace Authentication.AppLib.StartupExt
{
    using Microsoft.AspNetCore.Builder;
    using Microsoft.Extensions.DependencyInjection;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;

    public static class StatusCodePagesExtension
    {
        public static IServiceCollection _ConfigureSCP(this IServiceCollection services)
        {
            return services;
        }

        /// <summary>
        /// The StatusCodePagesMiddleware should be one of the earliest middleware in the pipeline, 
        /// as it can only modify the response of Middleware that comes after it in the pipeline.        
        /// </summary>
        public static IApplicationBuilder _UseSCP(this IApplicationBuilder app)
        {
            // Call StatusCodePages Before Routing!!!
            // **************************************
            // 1) Default text-only handlers for common error status codes
            //      app.UseStatusCodePages();    
            //      app.UseStatusCodePages("text/plain", "Status code page, status code: {0}");
            // 2) Customize the response content type and text
            //      app.UseStatusCodePages("text/plain", "Custom Status code page message! Status code: {0}");  
            // 3) To specify custom error-handling and response-writing code, se with lambda
            //      app.UseStatusCodePages(async context =>
            //      {
            //          context.HttpContext.Response.ContentType = "text/plain";
            //          await context.HttpContext.Response.WriteAsync("Status code page, status code: " +context.HttpContext.Response.StatusCode);
            //      });


            /* **************************************************************************************************************            
            In reality, it's unlikely you'll want to use status code pages with this default setting in anything 
            but a development environment. If you want to intercept status codes in production and return custom error pages, 
            you'll want to use one of the alternative extension methods that use redirects or pipeline re-execution to return 
            a user-friendly page:

                * UseStatusCodePagesWithRedirects
                * UseStatusCodePagesWithReExecute
                
            These two methods have a similar outcome, in that they allow you to generate user-friendly custom error pages when 
            an error occurs on the server. 

            The problem with redirects for error pages is that they somewhat abuse the return codes of HTTP, even though the end 
            result for a user is essentially the same. With the redirect method, when an error occurs the pipeline will return a 
            302 response to the user, with a redirect to a provided error path. This will cause a second response to be made to 
            the the URL that is used to generate the custom error page, which would then return a 200 OK code for the second 
            request.

            Semantically this isn't really correct, as you're triggering a second response, and ultimately returning a success code 
            when an error actually occurred. This could also cause issues for SEO. By re-executing the pipeline you keep the correct 
            (error) status code, you just return user-friendly HTML with it.

            You are still in the context of the initial response, but the whole pipeline after the StatusCodePagesMiddleware is 
            executed for a second time. The content generated by this second response is combined with the original Status Code to 
            generate the final response that gets sent to the user. This provides a workflow that is overall more semantically 
            correct, and means you don't completely lose the context of the original request.             
            **************************************************************************************************************  */

            // 4) The UseStatusCodePagesWithRedirects extension method 
            // Sends a 302 - Found status code to the client.
            // Redirects the client to the location provided in the URL template.
            //      app.UseStatusCodePagesWithRedirects("/Home/StatusCodePagesRedirect?id={0}");

            // 5) The UseStatusCodePagesWithReExecute extension method:
            // Returns the original status code to the client.
            // Generates the response body by re-executing the request pipeline using an alternate path
            // Ensure UseStatusCodePagesWithReExecute is placed before UseRouting so the request can be rerouted to the status page.
            // This method is commonly used when the app should:
            // Process the request without redirecting to a different endpoint.For web apps, the client's browser address bar reflects the originally requested endpoint.
            // Preserve and return the original status code with the response.            
            //      app.UseStatusCodePagesWithReExecute("/StatusCode", "?statusCode={0}");


            app.UseStatusCodePagesWithReExecute("/StatusCodePages/Index/{0}");

            // ***

            return app;
        }
    }
}
